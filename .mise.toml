# Kalilix Development Environment Configuration
# Enterprise-grade polyglot development with Nix flakes

[settings]
jobs = 4
yes = true
color = true
verbose = false
experimental = true
task_output = "prefix"
status.show_env = true
activate_aggressive = false
legacy_version_file = false
always_keep_download = true
task_run_auto_install = false
not_found_auto_install = false
auto_install = false
trusted_config_paths = [
  "{{ config_root }}",
  "{{ config_root }}/.config",
]

# Task configuration variables
[vars]
# Project identity
project_name = "kalilix"
project_org = "usrbinkat"
project_env = "development"

# Platform detection (set dynamically in tasks)
platform = "auto"  # auto, docker, native, wsl

# Nix configuration
nix_version = "2.24.10"
nix_installer_url = "https://install.determinate.systems/nix"
nix_channels = "nixpkgs-unstable nixos-24.05"

# Container configuration
container_name = "kalilix-workspace"
compose_project = "kalilix"
devcontainer_service = "devcontainer"

# Development shells
available_shells = "base python go rust node devops"
default_shell = "base"

# Binary cache configuration
cachix_name = "kalilix"
cache_public_key = ""  # To be configured

# Feature flags
enable_auto_update = "false"
enable_telemetry = "false"
enable_nix_cache = "true"

# Paths (relative to project root)
nix_config_dir = ".config/nix"
compose_dir = ".config/docker"
flake_dir = "."
build_dir = ".build"

# Logging
log_level = "info"
log_timestamp_format = "+%Y-%m-%d %H:%M:%S"

# Health check thresholds
min_nix_version = "2.24.0"
min_docker_memory_gb = "4.0"
min_disk_space_gb = "10"

# Environment configuration
[env]
_.file = ".env"
_.path = [
  "./.config/bin",
  "./scripts",
  "$HOME/.nix-profile/bin",
  "/nix/var/nix/profiles/default/bin"
]


# Core paths
PROJECT_ROOT = "{{ config_root }}"
KALILIX_ROOT = "{{ config_root }}"
WORKSPACE_ROOT = "{{ config_root }}"

# Project settings
PROJECT_NAME = "{{ vars.project_name }}"
PROJECT_ORG = "{{ vars.project_org }}"
PROJECT_ENV = "{{ vars.project_env }}"

# Nix configuration
NIX_VERSION = "{{ vars.nix_version }}"
NIX_CHANNELS = "{{ vars.nix_channels }}"
FLAKE_DIR = "{{ config_root }}/{{ vars.flake_dir }}"

# Binary cache
CACHIX_NAME = "{{ vars.cachix_name }}"
# CACHIX_AUTH_TOKEN set via environment

# Container settings
COMPOSE_PROJECT_NAME = "{{ vars.compose_project }}"
COMPOSE_FILE = "compose.yml"
DOCKER_BUILDKIT = "1"
COMPOSE_DOCKER_CLI_BUILD = "1"

# Development settings
EDITOR = "nvim"
COLORTERM = "truecolor"
KALILIX_SHELL = "{{ vars.default_shell }}"

# Platform detection (dynamically set by tasks)
KALILIX_PLATFORM = ""
KALILIX_IN_CONTAINER = ""

# Mise configuration
MISE_TASK_FORMAT_DEFAULT = "pretty"
MISE_TASK_QUIET_DEFAULT = "false"
MISE_TASK_PARALLEL_DEFAULT = "false"

# Task configuration
[task_config]
includes = [
  ".config/mise/toml",           # Include all TOML files
  ".config/mise/toml/main.toml", # Nix tasks
  ".config/mise/toml/nix.toml",  # Nix management
  ".config/mise/toml/docker.toml", # Docker operations
  ".config/mise/toml/dev.toml",  # Development tasks
  ".config/mise/toml/setup.toml", # Setup and initialization
]

# Hooks - Automatic Nix shell activation (replaces direnv .envrc)
[hooks.enter]
shell = "bash"
script = '''
# Only activate once per session
if [ -z "$KALILIX_ACTIVE" ]; then
    echo "üöÄ Activating Kalilix Nix development environment..."

    # Check if flake exists
    if [ ! -f flake.nix ]; then
        echo "   ‚ö†Ô∏è  No flake.nix found - run 'mise run setup' to initialize"
        return
    fi

    # Platform-aware activation
    if [ -f /.dockerenv ] || [ -n "${container:-}" ]; then
        # Container mode - use sudo for Nix commands (--init none requirement)
        if command -v nix &>/dev/null; then
            echo "   üê≥ Container mode - Loading Nix environment variables..."
            # Load Nix environment without entering new shell
            eval "$(sudo -E nix print-dev-env --impure 2>/dev/null || true)"
            export KALILIX_ACTIVE="container"
            export KALILIX_PLATFORM="container"
            echo "   ‚úÖ Nix environment loaded! All tools available."
        else
            echo "   ‚ùå Nix not found - run 'mise run setup'"
        fi
    else
        # Native/WSL mode - direct Nix access
        if command -v nix &>/dev/null; then
            echo "   üíª Native mode - Loading Nix environment variables..."
            # Load Nix environment without entering new shell
            eval "$(nix print-dev-env --impure 2>/dev/null || true)"
            export KALILIX_ACTIVE="native"
            export KALILIX_PLATFORM="native"
            echo "   ‚úÖ Nix environment loaded! All tools available."
        else
            echo "   ‚ùå Nix not found - run 'mise run setup'"
        fi
    fi

    # Show available shortcuts
    if [ -n "$KALILIX_ACTIVE" ]; then
        echo ""
        echo "   üí° Quick commands:"
        echo "      kx         - Kalilix CLI"
        echo "      mise tasks - Show all tasks"
        echo "      claude-code - AI assistant"
    fi
fi
'''

[hooks.leave]
shell = "bash"
script = '''
# Clean up when leaving the project
if [ -n "$KALILIX_ACTIVE" ]; then
    echo "üëã Leaving Kalilix project..."
    echo "   Environment variables from Nix remain active in this shell"
    echo "   Start a new shell if you need a clean environment"
    # Note: We don't unset variables as this would require complex tracking
    # and mise hooks don't have cleanup capabilities like direnv
fi
'''

# Tool versions (managed by Nix, documented here for reference)
[tools]
# mise = "latest"  # Already a prerequisite
# These are managed by Nix flakes, not mise:
# python = "3.12"
# node = "22"
# go = "1.23"
# rust = "stable"

