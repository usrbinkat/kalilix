#!/usr/bin/env bash
# Nix Bootstrap - Platform-aware Nix installer
# Handles Nix installation for containers, native Linux, macOS, and WSL

set -euo pipefail

# Configuration
NIX_INSTALLER_URL="${NIX_INSTALLER_URL:-https://install.determinate.systems/nix}"
PLATFORM="${1:-auto}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Utility functions
log() {
    echo -e "${GREEN}[NIX-BOOTSTRAP]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
    exit 1
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1" >&2
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Check if Nix is already installed
check_existing() {
    if command -v nix &>/dev/null; then
        log "Nix is already installed: $(nix --version)"
        echo ""
        echo "To reinstall, first uninstall with:"
        echo "  /nix/nix-installer uninstall"
        echo "or"
        echo "  mise run nix:uninstall"
        exit 0
    fi
}

# Detect platform if auto
detect_platform() {
    if [ "$PLATFORM" = "auto" ]; then
        if [ -f /.dockerenv ] || [ -n "${container:-}" ]; then
            PLATFORM="container"
        elif [ -n "${WSL_DISTRO_NAME:-}" ]; then
            PLATFORM="wsl"
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            PLATFORM="macos"
        else
            PLATFORM="linux"
        fi
    fi
    log "Detected platform: $PLATFORM"
}

# Install for container environment (Docker/Podman)
install_container() {
    log "Installing Nix for container environment..."
    echo ""
    info "Using Determinate Systems installer with container settings"

    # Container-specific flags:
    # --init none: No init system (systemd) in container
    # --extra-conf "sandbox = false": Disable sandboxing for container compatibility
    # --no-confirm: Non-interactive installation
    curl --proto '=https' --tlsv1.2 -sSf -L "$NIX_INSTALLER_URL" | sh -s -- install linux \
        --init none \
        --extra-conf "sandbox = false" \
        --extra-conf "experimental-features = nix-command flakes" \
        --extra-conf "max-jobs = auto" \
        --extra-conf "cores = 0" \
        --extra-conf "trusted-users = root $USER" \
        --no-confirm

    # Source Nix profile
    export PATH="${PATH}:/nix/var/nix/profiles/default/bin"

    warn "Container installation complete!"
    warn "Note: Only root or sudo users can run Nix in container mode"
    echo ""
    echo "Add to your shell profile:"
    echo "  export PATH=\"\${PATH}:/nix/var/nix/profiles/default/bin\""
}

# Install for WSL environment
install_wsl() {
    log "Installing Nix for WSL environment..."
    echo ""

    # Check if systemd is available
    if systemctl --version &>/dev/null 2>&1; then
        info "WSL with systemd detected, using standard Linux installation"
        install_linux
    else
        info "WSL without systemd detected, using init-less installation"
        warn "Only single-user mode will be available"

        curl --proto '=https' --tlsv1.2 -sSf -L "$NIX_INSTALLER_URL" | sh -s -- install linux \
            --init none \
            --extra-conf "experimental-features = nix-command flakes" \
            --no-confirm
    fi
}

# Install for native Linux
install_linux() {
    log "Installing Nix for Linux..."
    echo ""
    info "Using Determinate Systems installer with multi-user mode"

    curl --proto '=https' --tlsv1.2 -sSf -L "$NIX_INSTALLER_URL" | sh -s -- install \
        --determinate \
        --extra-conf "experimental-features = nix-command flakes" \
        --no-confirm
}

# Install for macOS
install_macos() {
    log "Installing Nix for macOS..."
    echo ""
    info "Using Determinate Systems installer for macOS"

    curl --proto '=https' --tlsv1.2 -sSf -L "$NIX_INSTALLER_URL" | sh -s -- install \
        --determinate \
        --extra-conf "experimental-features = nix-command flakes" \
        --no-confirm
}

# Verify installation
verify_installation() {
    echo ""
    log "Verifying installation..."

    # Source the profile if needed
    if [ -f /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh ]; then
        . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
    elif [ -f "$HOME/.nix-profile/etc/profile.d/nix.sh" ]; then
        . "$HOME/.nix-profile/etc/profile.d/nix.sh"
    fi

    # Add to PATH for container installations
    export PATH="${PATH}:/nix/var/nix/profiles/default/bin"

    if command -v nix &>/dev/null; then
        log "✅ Nix installed successfully!"
        echo ""
        echo "Version: $(nix --version)"
        echo ""

        # Test flakes
        if nix flake --help &>/dev/null 2>&1; then
            log "✅ Flakes enabled"
        else
            warn "⚠️  Flakes not fully enabled"
        fi

        # Show receipt location if exists
        if [ -f /nix/receipt.json ]; then
            info "Installation receipt: /nix/receipt.json"
        fi
    else
        error "Installation verification failed!"
    fi
}

# Main installation flow
main() {
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║              Nix Bootstrap Installer                           ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo ""

    # Check for existing installation
    check_existing

    # Check prerequisites
    if ! command -v curl &>/dev/null; then
        error "curl is required but not installed"
    fi

    # Detect platform
    detect_platform

    # Install based on platform
    case "$PLATFORM" in
        container|docker)
            install_container
            ;;
        wsl)
            install_wsl
            ;;
        linux)
            install_linux
            ;;
        macos|darwin)
            install_macos
            ;;
        *)
            error "Unsupported platform: $PLATFORM"
            ;;
    esac

    # Verify the installation
    verify_installation

    echo ""
    log "Installation complete!"
    echo ""
    echo "Next steps:"
    echo "  1. Restart your shell or source the Nix profile"
    echo "  2. Run 'nix --version' to verify"
    echo "  3. Run 'mise run shell' to enter development environment"
}

# Execute main
main "$@"